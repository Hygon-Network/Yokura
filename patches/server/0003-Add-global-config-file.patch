From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sat, 18 Sep 2021 23:10:52 +0200
Subject: [PATCH] Add global config file


diff --git a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..cd6d278912dcbe310665072d2f70a21626f98f87
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
@@ -0,0 +1,90 @@
+package fr.hygon.yokura.config;
+
+import com.google.common.base.Throwables;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.logging.Level;
+
+public class YokuraGlobalConfig {
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignored) {
+        } catch (InvalidConfigurationException exception) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load " + configFile.getName() + ", please correct your syntax errors", exception);
+            throw Throwables.propagate(exception);
+        }
+        config.options().copyDefaults(true);
+
+        readConfig();
+    }
+
+    static void readConfig() {
+        for (Method method : YokuraGlobalConfig.class.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(null);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.set(path, val);
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static float getFloat(String path, float def) {
+        // TODO: Figure out why getFloat() always returns the default value.
+        return (float) getDouble(path, (double) def);
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return (List<T>) config.getList(path, config.getList(path));
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 2a569d05edf0f5337afbcd6803c0513d338ca55e..6cc6930b85e0d462ad099fae294ad36a1e1abeb3 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -225,6 +225,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
         gg.airplane.AirplaneConfig.load(); // Airplane - config
         gg.airplane.commands.AirplaneCommands.init(); // Airplane - command
+        // Yokura start
+        try {
+            fr.hygon.yokura.config.YokuraGlobalConfig.init((java.io.File) options.valueOf("yokura-global-settings"));
+        } catch (Exception exception) {
+            DedicatedServer.LOGGER.error("Couldn't load yokura configuration.", exception);
+            return false;
+        }
+        // Yokura end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 22e9dd17f62103c5061435099ce96a3d70d54808..47ebe05630738e09094a583d1bf37c8ee566521a 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -160,6 +160,13 @@ public class Main {
                         .defaultsTo(new File[] {})
                         .describedAs("Jar file");
                 // Paper end
+                // Yokura start
+                accepts("yokura-global-settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File(org.apache.commons.io.FileUtils.getUserDirectory() + File.separator + "HygonNetwork" + File.separator + "yokura-global.yml"))
+                        .describedAs("YML File");
+                // Yokura end
             }
         };
 
