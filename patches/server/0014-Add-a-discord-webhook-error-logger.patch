From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sat, 20 Nov 2021 17:25:00 +0100
Subject: [PATCH] Add a discord webhook error logger


diff --git a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
index 8abb9856e92e6d6ada0a08d78aab01e7acb8356c..4ac4bf45649646c8f29461d198f8f268dcc04a52 100644
--- a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
+++ b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
@@ -11,13 +11,11 @@ import java.io.DataOutputStream;
 import java.io.IOException;
 
 public class YokuraAPIServer implements IYokuraAPI {
-    private final MongoClient mongoClient;
-    private final MongoDatabase mongoDatabase;
+    private MongoClient mongoClient = null;
+    private MongoDatabase mongoDatabase = null;
     private final String serverID;
 
-    public YokuraAPIServer(MongoClient mongoClient, MongoDatabase mongoDatabase, String serverID) {
-        this.mongoClient = mongoClient;
-        this.mongoDatabase = mongoDatabase;
+    public YokuraAPIServer(String serverID) {
         this.serverID = serverID;
     }
 
@@ -31,6 +29,14 @@ public class YokuraAPIServer implements IYokuraAPI {
         return mongoDatabase;
     }
 
+    public void setMongoClient(MongoClient mongoClient) {
+        this.mongoClient = mongoClient;
+    }
+
+    public void setMongoDatabase(MongoDatabase mongoDatabase) {
+        this.mongoDatabase = mongoDatabase;
+    }
+
     @Override
     public void publish(Message message) {
         MessagePacket messagePacket = new MessagePacket(message);
diff --git a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
index 7547132521b586f329abe0d51c89b4245d12aa1f..234c34d5bade01bee91f3d95559c9a50f5615133 100644
--- a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
+++ b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
@@ -132,4 +132,9 @@ public class YokuraGlobalConfig {
     private static void getDefaultTokens() {
         defaultTokens = getDouble("players.default-tokens", defaultTokens);
     }
+
+    public static String discordWebhookURL = "https://discord.com/api/webhooks/";
+    private static void getDiscordWebhookURL() {
+        discordWebhookURL = getString("utils.discord-logger-webhook", discordWebhookURL);
+    }
 }
diff --git a/src/main/java/fr/hygon/yokura/logger/DiscordLogger.java b/src/main/java/fr/hygon/yokura/logger/DiscordLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab517a6a5cb04dca6451dcf089d8e20a618c87c4
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/logger/DiscordLogger.java
@@ -0,0 +1,80 @@
+package fr.hygon.yokura.logger;
+
+import fr.hygon.yokura.config.YokuraGlobalConfig;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.Logger;
+import org.apache.logging.log4j.core.appender.AbstractAppender;
+import org.apache.logging.log4j.core.filter.AbstractFilter;
+import java.awt.Color;
+import java.io.IOException;
+import java.util.Arrays;
+
+public class DiscordLogger extends AbstractAppender {
+    private final String serverID;
+
+    public DiscordLogger(String serverID) {
+        super("DiscordLogger", new DiscordFilter(), null, false);
+        this.serverID = serverID;
+    }
+
+    @Override
+	public void append(LogEvent logEvent) {
+        if(logEvent.getLevel().equals(Level.WARN) || logEvent.getLevel().equals(Level.ERROR) || logEvent.getLevel().equals(Level.FATAL)) {
+            logException(logEvent);
+        }
+    }
+
+    private void logException(LogEvent e) {
+        DiscordWebhook webhook = new DiscordWebhook(YokuraGlobalConfig.discordWebhookURL);
+        webhook.setUsername(serverID);
+
+        DiscordWebhook.EmbedObject embed = new DiscordWebhook.EmbedObject();
+        embed.setTitle(e.getMessage().getFormattedMessage());
+        if(e.getThrown() != null) {
+            embed.addField(e.getThrown().getClass().getCanonicalName() + ": " + e.getThrown().getMessage(), Arrays.toString(e.getThrown().getStackTrace()), true);
+        } else {
+            embed.addField(e.getLevel().toString(), "No informations.", true);
+        }
+
+        Level level = e.getLevel();
+        if (Level.WARN.equals(level)) {
+            embed.setColor(new Color(220, 190, 0));
+        } else if (Level.ERROR.equals(level)) {
+            embed.setColor(new Color(225, 25, 0));
+        } else if (Level.FATAL.equals(level)) {
+            embed.setColor(new Color(180, 20, 0));
+        }
+
+        webhook.addEmbed(embed);
+        try {
+            webhook.execute();
+        } catch (IOException ignored) {
+
+        }
+    }
+
+    private static class DiscordFilter extends AbstractFilter {
+        @Override
+        public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, String msg,
+                             Object... params) {
+            return this.filter(logger.getName());
+        }
+
+        @Override
+		public Result filter(Logger logger, org.apache.logging.log4j.Level level, Marker marker, Object msg, Throwable t) {
+            return this.filter(logger.getName());
+        }
+
+        @Override
+		public Result filter(LogEvent event) {
+            return this.filter(event == null ? null : event.getLoggerName());
+        }
+
+        private Result filter(String loggerName) {
+            return loggerName != null && loggerName.startsWith("fr.hygon.yokura.logger") ? Result.DENY
+                    : Result.NEUTRAL;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/fr/hygon/yokura/logger/DiscordWebhook.java b/src/main/java/fr/hygon/yokura/logger/DiscordWebhook.java
new file mode 100644
index 0000000000000000000000000000000000000000..167bf785bff5f2d13afb2ae78db252c2a1bb0ff5
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/logger/DiscordWebhook.java
@@ -0,0 +1,357 @@
+package fr.hygon.yokura.logger;
+
+import javax.net.ssl.HttpsURLConnection;
+import java.awt.Color;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.lang.reflect.Array;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Class used to execute Discord Webhooks with low effort
+ *
+ * Made by k3kdude on GitHub (https://gist.github.com/k3kdude/fba6f6b37594eae3d6f9475330733bdb)
+ */
+public class DiscordWebhook {
+
+    private final String url;
+    private String content;
+    private String username;
+    private String avatarUrl;
+    private boolean tts;
+    private final List<EmbedObject> embeds = new ArrayList<>();
+
+    /**
+     * Constructs a new DiscordWebhook instance
+     *
+     * @param url The webhook URL obtained in Discord
+     */
+    public DiscordWebhook(String url) {
+        this.url = url;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public void setUsername(String username) {
+        this.username = username;
+    }
+
+    public void setAvatarUrl(String avatarUrl) {
+        this.avatarUrl = avatarUrl;
+    }
+
+    public void setTts(boolean tts) {
+        this.tts = tts;
+    }
+
+    public void addEmbed(EmbedObject embed) {
+        this.embeds.add(embed);
+    }
+
+    public void execute() throws IOException {
+        if (this.content == null && this.embeds.isEmpty()) {
+            throw new IllegalArgumentException("Set content or add at least one EmbedObject");
+        }
+
+        JSONObject json = new JSONObject();
+
+        json.put("content", this.content);
+        json.put("username", this.username);
+        json.put("avatar_url", this.avatarUrl);
+        json.put("tts", this.tts);
+
+        if (!this.embeds.isEmpty()) {
+            List<JSONObject> embedObjects = new ArrayList<>();
+
+            for (EmbedObject embed : this.embeds) {
+                JSONObject jsonEmbed = new JSONObject();
+
+                jsonEmbed.put("title", embed.getTitle());
+                jsonEmbed.put("description", embed.getDescription());
+                jsonEmbed.put("url", embed.getUrl());
+
+                if (embed.getColor() != null) {
+                    Color color = embed.getColor();
+                    int rgb = color.getRed();
+                    rgb = (rgb << 8) + color.getGreen();
+                    rgb = (rgb << 8) + color.getBlue();
+
+                    jsonEmbed.put("color", rgb);
+                }
+
+                EmbedObject.Footer footer = embed.getFooter();
+                EmbedObject.Image image = embed.getImage();
+                EmbedObject.Thumbnail thumbnail = embed.getThumbnail();
+                EmbedObject.Author author = embed.getAuthor();
+                List<EmbedObject.Field> fields = embed.getFields();
+
+                if (footer != null) {
+                    JSONObject jsonFooter = new JSONObject();
+
+                    jsonFooter.put("text", footer.getText());
+                    jsonFooter.put("icon_url", footer.getIconUrl());
+                    jsonEmbed.put("footer", jsonFooter);
+                }
+
+                if (image != null) {
+                    JSONObject jsonImage = new JSONObject();
+
+                    jsonImage.put("url", image.getUrl());
+                    jsonEmbed.put("image", jsonImage);
+                }
+
+                if (thumbnail != null) {
+                    JSONObject jsonThumbnail = new JSONObject();
+
+                    jsonThumbnail.put("url", thumbnail.getUrl());
+                    jsonEmbed.put("thumbnail", jsonThumbnail);
+                }
+
+                if (author != null) {
+                    JSONObject jsonAuthor = new JSONObject();
+
+                    jsonAuthor.put("name", author.getName());
+                    jsonAuthor.put("url", author.getUrl());
+                    jsonAuthor.put("icon_url", author.getIconUrl());
+                    jsonEmbed.put("author", jsonAuthor);
+                }
+
+                List<JSONObject> jsonFields = new ArrayList<>();
+                for (EmbedObject.Field field : fields) {
+                    JSONObject jsonField = new JSONObject();
+
+                    jsonField.put("name", field.getName());
+                    jsonField.put("value", field.getValue());
+                    jsonField.put("inline", field.isInline());
+
+                    jsonFields.add(jsonField);
+                }
+
+                jsonEmbed.put("fields", jsonFields.toArray());
+                embedObjects.add(jsonEmbed);
+            }
+
+            json.put("embeds", embedObjects.toArray());
+        }
+
+        URL url = new URL(this.url);
+        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
+        connection.addRequestProperty("Content-Type", "application/json");
+        connection.addRequestProperty("User-Agent", "Java-DiscordWebhook-BY-Gelox_");
+        connection.setDoOutput(true);
+        connection.setRequestMethod("POST");
+
+        OutputStream stream = connection.getOutputStream();
+        stream.write(json.toString().getBytes());
+        stream.flush();
+        stream.close();
+
+        connection.getInputStream().close(); //I'm not sure why, but it doesn't work without getting the InputStream
+        connection.disconnect();
+    }
+
+    public static class EmbedObject {
+        private String title;
+        private String description;
+        private String url;
+        private Color color;
+
+        private Footer footer;
+        private Thumbnail thumbnail;
+        private Image image;
+        private Author author;
+        private final List<Field> fields = new ArrayList<>();
+
+        public String getTitle() {
+            return title;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        public String getUrl() {
+            return url;
+        }
+
+        public Color getColor() {
+            return color;
+        }
+
+        public Footer getFooter() {
+            return footer;
+        }
+
+        public Thumbnail getThumbnail() {
+            return thumbnail;
+        }
+
+        public Image getImage() {
+            return image;
+        }
+
+        public Author getAuthor() {
+            return author;
+        }
+
+        public List<Field> getFields() {
+            return fields;
+        }
+
+        public EmbedObject setTitle(String title) {
+            this.title = title;
+            return this;
+        }
+
+        public EmbedObject setDescription(String description) {
+            this.description = description;
+            return this;
+        }
+
+        public EmbedObject setUrl(String url) {
+            this.url = url;
+            return this;
+        }
+
+        public EmbedObject setColor(Color color) {
+            this.color = color;
+            return this;
+        }
+
+        public EmbedObject setFooter(String text, String icon) {
+            this.footer = new Footer(text, icon);
+            return this;
+        }
+
+        public EmbedObject setThumbnail(String url) {
+            this.thumbnail = new Thumbnail(url);
+            return this;
+        }
+
+        public EmbedObject setImage(String url) {
+            this.image = new Image(url);
+            return this;
+        }
+
+        public EmbedObject setAuthor(String name, String url, String icon) {
+            this.author = new Author(name, url, icon);
+            return this;
+        }
+
+        public EmbedObject addField(String name, String value, boolean inline) {
+            this.fields.add(new Field(name, value, inline));
+            return this;
+        }
+
+        private record Footer(String text, String iconUrl) {
+
+            private String getText() {
+                return text;
+            }
+
+            private String getIconUrl() {
+                return iconUrl;
+            }
+        }
+
+        private record Thumbnail(String url) {
+
+            private String getUrl() {
+                return url;
+            }
+        }
+
+        private record Image(String url) {
+
+            private String getUrl() {
+                return url;
+            }
+        }
+
+        private record Author(String name, String url, String iconUrl) {
+
+            private String getName() {
+                return name;
+            }
+
+            private String getUrl() {
+                return url;
+            }
+
+            private String getIconUrl() {
+                return iconUrl;
+            }
+        }
+
+        private record Field(String name, String value, boolean inline) {
+
+            private String getName() {
+                return name;
+            }
+
+            private String getValue() {
+                return value;
+            }
+
+            private boolean isInline() {
+                return inline;
+            }
+        }
+    }
+
+    private static class JSONObject {
+
+        private final HashMap<String, Object> map = new HashMap<>();
+
+        void put(String key, Object value) {
+            if (value != null) {
+                map.put(key, value);
+            }
+        }
+
+        @Override
+        public String toString() {
+            StringBuilder builder = new StringBuilder();
+            Set<Map.Entry<String, Object>> entrySet = map.entrySet();
+            builder.append("{");
+
+            int i = 0;
+            for (Map.Entry<String, Object> entry : entrySet) {
+                Object val = entry.getValue();
+                builder.append(quote(entry.getKey())).append(":");
+
+                if (val instanceof String) {
+                    builder.append(quote(String.valueOf(val)));
+                } else if (val instanceof Integer) {
+                    builder.append(Integer.valueOf(String.valueOf(val)));
+                } else if (val instanceof Boolean) {
+                    builder.append(val);
+                } else if (val instanceof JSONObject) {
+                    builder.append(val);
+                } else if (val.getClass().isArray()) {
+                    builder.append("[");
+                    int len = Array.getLength(val);
+                    for (int j = 0; j < len; j++) {
+                        builder.append(Array.get(val, j).toString()).append(j != len - 1 ? "," : "");
+                    }
+                    builder.append("]");
+                }
+
+                builder.append(++i == entrySet.size() ? "}" : ",");
+            }
+
+            return builder.toString();
+        }
+
+        private String quote(String string) {
+            return "\"" + string + "\"";
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 0dfd3c3901bd8ee6f5afc6dc1f22c5d976a7168d..3a07d095a7abad32680067a50fc3ea864602d2a4 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -244,6 +244,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
 
+        fr.hygon.yokura.YokuraAPI.setInstance(new fr.hygon.yokura.YokuraAPIServer((String) options.valueOf("network-server-name")));
+
+        if(fr.hygon.yokura.YokuraAPI.getServerID() != null) {
+            fr.hygon.yokura.logger.DiscordLogger appender = new fr.hygon.yokura.logger.DiscordLogger((String) options.valueOf("network-server-name"));
+            appender.start();
+            ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger()).addAppender(appender);
+        }
+
         com.mongodb.MongoCredential mongoCredential = com.mongodb.MongoCredential.createCredential(YokuraGlobalConfig.mongoUser, YokuraGlobalConfig.mongoDatabase, YokuraGlobalConfig.mongoPassword);
         com.mongodb.MongoClient mongoClient = new com.mongodb.MongoClient(new com.mongodb.ServerAddress(YokuraGlobalConfig.mongoHost, YokuraGlobalConfig.mongoPort), mongoCredential, com.mongodb.MongoClientOptions.builder().build());
         com.mongodb.client.MongoDatabase mongoDatabase = mongoClient.getDatabase(YokuraGlobalConfig.mongoDatabase);
@@ -256,7 +264,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
 
-        fr.hygon.yokura.YokuraAPI.setInstance(new fr.hygon.yokura.YokuraAPIServer(mongoClient, mongoDatabase, (String) options.valueOf("network-server-name")));
+        ((fr.hygon.yokura.YokuraAPIServer) fr.hygon.yokura.YokuraAPI.getInstance()).setMongoClient(mongoClient);
+        ((fr.hygon.yokura.YokuraAPIServer) fr.hygon.yokura.YokuraAPI.getInstance()).setMongoDatabase(mongoDatabase);
 
         YokuraBroker broker = new YokuraBroker();
         if(!broker.connect(YokuraGlobalConfig.brokerHost, YokuraGlobalConfig.brokerPort)) {
