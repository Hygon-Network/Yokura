From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Mon, 20 Sep 2021 19:01:36 +0200
Subject: [PATCH] Add broker


diff --git a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
index 6e403a6d5f7990478c5bc372b75a68398bf8eee3..e3833166e69cdb3d2ad012b270a18c566db1245c 100644
--- a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
+++ b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
@@ -2,6 +2,9 @@ package fr.hygon.yokura;
 
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoDatabase;
+import fr.hygon.yokura.broker.Message;
+import fr.hygon.yokura.broker.YokuraBroker;
+import fr.hygon.yokura.broker.packets.MessagePacket;
 
 public class YokuraAPIServer implements IYokuraAPI {
     private final MongoClient mongoClient;
@@ -21,4 +24,10 @@ public class YokuraAPIServer implements IYokuraAPI {
     public MongoDatabase getMongoDatabase() {
         return mongoDatabase;
     }
+
+    @Override
+    public void publish(Message message) {
+        MessagePacket messagePacket = new MessagePacket(message);
+        YokuraBroker.sendPacket(messagePacket);
+    }
 }
diff --git a/src/main/java/fr/hygon/yokura/broker/ClientHandler.java b/src/main/java/fr/hygon/yokura/broker/ClientHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..1999cfcbfd02597afffe44976c3d4434c6c816ff
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/ClientHandler.java
@@ -0,0 +1,33 @@
+package fr.hygon.yokura.broker;
+
+import fr.hygon.yokura.broker.packets.Packet;
+import fr.hygon.yokura.broker.packets.Packets;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+
+public class ClientHandler extends ChannelInboundHandlerAdapter {
+    @Override
+    public void channelRead(ChannelHandlerContext channelHandlerContext, Object object) {
+        ByteBuf byteBuf = (ByteBuf) object;
+
+        int packetID = byteBuf.readInt();
+        Packet packet = Packets.getPacketByID(packetID);
+        if(packet == null) {
+            System.err.println("Received unknown packet with id " + packetID);
+            return;
+        }
+        packet.read(channelHandlerContext, byteBuf);
+    }
+
+    @Override
+    public void channelReadComplete(ChannelHandlerContext ctx) {
+        ctx.writeAndFlush(Unpooled.EMPTY_BUFFER);
+    }
+
+    @Override
+    public void exceptionCaught(ChannelHandlerContext channelHandlerContext, Throwable cause) {
+        cause.printStackTrace();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/fr/hygon/yokura/broker/ServerPubSubManager.java b/src/main/java/fr/hygon/yokura/broker/ServerPubSubManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..e280974c7ef54d0dfa6b4b01b38a25901efc8442
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/ServerPubSubManager.java
@@ -0,0 +1,54 @@
+package fr.hygon.yokura.broker;
+
+import fr.hygon.yokura.broker.packets.ChannelPacket;
+import fr.hygon.yokura.broker.packets.MessagePacket;
+import java.util.ArrayList;
+
+public class ServerPubSubManager implements BrokerPubSub.PubSubManager {
+    private static final ArrayList<BrokerPubSub> pubSubs = new ArrayList<>();
+
+    @Override
+    public void registerChannel(BrokerPubSub pubSub, String channel) {
+        if(!pubSubs.contains(pubSub)) {
+            pubSubs.add(pubSub);
+        }
+
+        ChannelPacket channelPacket = new ChannelPacket(ChannelPacket.Actions.REGISTER, channel);
+        YokuraBroker.sendPacket(channelPacket);
+    }
+
+    @Override
+    public void unregisterChannel(BrokerPubSub pubSub, String channel) {
+        if(pubSub.channels.isEmpty()) {
+            pubSubs.remove(pubSub);
+        }
+
+        boolean isClientStillUsingChannel = false; // Other pubsubs might still use it!
+        for(BrokerPubSub brokerPubSubs : pubSubs) {
+            if(brokerPubSubs.channels.contains(channel)) {
+                isClientStillUsingChannel = true;
+                break;
+            }
+        }
+
+        if(!isClientStillUsingChannel) { // No pubsubs are listening for this channel so we can unregister it
+            ChannelPacket channelPacket = new ChannelPacket(ChannelPacket.Actions.UNREGISTER, channel);
+            YokuraBroker.sendPacket(channelPacket);
+        }
+    }
+
+    @Override
+    public void publish(Message message) {
+        MessagePacket messagePacket = new MessagePacket(message);
+        YokuraBroker.sendPacket(messagePacket);
+    }
+
+    @Override
+    public void handleMessage(String channel, byte[] message) {
+        for(BrokerPubSub brokerPubSub : pubSubs) {
+            if(brokerPubSub.channels.contains(channel)) {
+                brokerPubSub.onReceive(channel, message);
+            }
+        }
+    }
+}
diff --git a/src/main/java/fr/hygon/yokura/broker/YokuraBroker.java b/src/main/java/fr/hygon/yokura/broker/YokuraBroker.java
new file mode 100644
index 0000000000000000000000000000000000000000..6dea767b5b9ac2b54d809c41cff6624194073919
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/YokuraBroker.java
@@ -0,0 +1,93 @@
+package fr.hygon.yokura.broker;
+
+import fr.hygon.yokura.broker.packets.Packet;
+import fr.hygon.yokura.broker.packets.Packets;
+import fr.hygon.yokura.broker.packets.RegisterClientPacket;
+import io.netty.bootstrap.Bootstrap;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.*;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.SocketChannel;
+import io.netty.channel.socket.nio.NioSocketChannel;
+import java.net.InetSocketAddress;
+import java.util.UUID;
+
+public class YokuraBroker {
+    public static UUID CLIENT_UUID;
+
+    private final Object locker = new Object();
+    public boolean isConnected = false;
+    public boolean hasFinished = false;
+
+    private static Channel brokerChannel = null;
+
+    public boolean connect(String host, int port) {
+        CLIENT_UUID = UUID.randomUUID();
+        BrokerPubSub.setPubSubManager(new ServerPubSubManager());
+
+        Thread brokerThread = new Thread(() -> {
+            EventLoopGroup group = new NioEventLoopGroup();
+            try{
+                Bootstrap clientBootstrap = new Bootstrap();
+
+                clientBootstrap.group(group);
+                clientBootstrap.channel(NioSocketChannel.class);
+                clientBootstrap.remoteAddress(new InetSocketAddress(host, port));
+                clientBootstrap.handler(new ChannelInitializer<SocketChannel>() {
+                    protected void initChannel(SocketChannel socketChannel) {
+                        socketChannel.pipeline().addLast(new ClientHandler());
+                    }
+                });
+                ChannelFuture channelFuture = clientBootstrap.connect();
+                channelFuture.addListener((ChannelFutureListener) future -> {
+                    if(future.isSuccess()) {
+                        brokerChannel = future.channel();
+                        sendPacket(new RegisterClientPacket());
+                    }
+
+                    synchronized (locker) {
+                        isConnected = future.isSuccess();
+                        hasFinished = true;
+                        locker.notify();
+                    }
+                });
+                channelFuture.sync();
+                channelFuture.channel().closeFuture().sync();
+            } catch (InterruptedException exception) {
+                exception.printStackTrace();
+            } finally {
+                try {
+                    group.shutdownGracefully().sync();
+                } catch (InterruptedException exception) {
+                    exception.printStackTrace();
+                }
+            }
+        });
+        brokerThread.setName("Broker Thread");
+        brokerThread.start();
+
+        synchronized (locker) {
+            while (!hasFinished) {
+                try {
+                    locker.wait();
+                } catch (InterruptedException exception) {
+                    exception.printStackTrace();
+                }
+            }
+        }
+
+        return isConnected;
+    }
+
+    public static void sendPacket(Packet packet) {
+        ByteBuf byteBuf = Unpooled.buffer();
+        byteBuf.writeInt(Packets.getIDByPacket(packet));
+
+        byteBuf.writeLong(CLIENT_UUID.getMostSignificantBits());
+        byteBuf.writeLong(CLIENT_UUID.getLeastSignificantBits());
+
+        packet.write(byteBuf);
+        brokerChannel.writeAndFlush(byteBuf);
+    }
+}
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/ChannelPacket.java b/src/main/java/fr/hygon/yokura/broker/packets/ChannelPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..dbeeffd6b2e4ba046e025d17bbf92edcd464593e
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/packets/ChannelPacket.java
@@ -0,0 +1,44 @@
+package fr.hygon.yokura.broker.packets;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+
+import java.nio.charset.StandardCharsets;
+
+public class ChannelPacket implements Packet {
+    private final Actions action;
+    private final String channel;
+
+    public ChannelPacket(Actions action, String channel) {
+        this.action = action;
+        this.channel = channel;
+    }
+
+    @Override
+    public void read(ChannelHandlerContext ctx, ByteBuf in) { // The client will not receive this packet
+
+    }
+
+    @Override
+    public void write(ByteBuf out) {
+        out.writeInt(action.getActionID());
+
+        out.writeInt(channel.length());
+        out.writeCharSequence(channel, StandardCharsets.UTF_8);
+    }
+
+    public enum Actions {
+        REGISTER(0),
+        UNREGISTER(1);
+
+        private final int actionID;
+
+        Actions(int actionID) {
+            this.actionID = actionID;
+        }
+
+        public int getActionID() {
+            return actionID;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java b/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..50f01885e9e1149324da157a41c58f72ae927a42
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java
@@ -0,0 +1,35 @@
+package fr.hygon.yokura.broker.packets;
+
+import fr.hygon.yokura.broker.BrokerPubSub;
+import fr.hygon.yokura.broker.Message;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.ChannelHandlerContext;
+import java.nio.charset.StandardCharsets;
+
+public class MessagePacket implements Packet {
+    private final Message message;
+
+    public MessagePacket(Message message) {
+        this.message = message;
+    }
+
+    @Override
+    public void read(ChannelHandlerContext ctx, ByteBuf in) {
+        int channelLength = in.readInt();
+        String channel = (String) in.readCharSequence(channelLength, StandardCharsets.UTF_8);
+
+        byte[] message = new byte[in.readableBytes()];
+        in.readBytes(message);
+
+        BrokerPubSub.getPubSubManager().handleMessage(channel, message);
+    }
+
+    @Override
+    public void write(ByteBuf out) {
+        out.writeInt(message.getChannel().length());
+        out.writeCharSequence(message.getChannel(), StandardCharsets.UTF_8);
+
+        out.writeBytes(Unpooled.wrappedBuffer(message.getMessage()));
+    }
+}
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/Packet.java b/src/main/java/fr/hygon/yokura/broker/packets/Packet.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b084b4d478b7cc1b367d2b93429d0a3e6df56db
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/packets/Packet.java
@@ -0,0 +1,10 @@
+package fr.hygon.yokura.broker.packets;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+
+public interface Packet {
+    void read(ChannelHandlerContext ctx, ByteBuf in);
+
+    void write(ByteBuf out);
+}
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/Packets.java b/src/main/java/fr/hygon/yokura/broker/packets/Packets.java
new file mode 100644
index 0000000000000000000000000000000000000000..aa19fe3101376fc021927dc55f28ecbcac91bc0a
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/packets/Packets.java
@@ -0,0 +1,47 @@
+package fr.hygon.yokura.broker.packets;
+
+public enum Packets {
+    REGISTER_CLIENT_PACKET(0, RegisterClientPacket.class),
+    CHANNEL_PACKET(1, ChannelPacket.class),
+    MESSAGE_PACKET(2, MessagePacket.class);
+
+    private final int packetID;
+    private final Class<? extends Packet> packet;
+
+    Packets(int packetID, Class<? extends Packet> packet) {
+        this.packetID = packetID;
+        this.packet = packet;
+    }
+
+    public int getPacketID() {
+        return packetID;
+    }
+
+    public Class<? extends Packet> getPacket() {
+        return packet;
+    }
+
+    public static Packet getPacketByID(int id) {
+        for(Packets packets : Packets.values()) {
+            if(packets.packetID == id) {
+                try {
+                    return (Packet) packets.getPacket().getConstructors()[0].newInstance();
+                } catch (Exception exception) {
+                    exception.printStackTrace();
+                }
+            }
+        }
+
+        return null;
+    }
+
+    public static int getIDByPacket(Packet packet) {
+        for(Packets packets : Packets.values()) {
+            if(packets.getPacket().equals(packet.getClass())) {
+                return packets.getPacketID();
+            }
+        }
+
+        return -1;
+    }
+}
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/RegisterClientPacket.java b/src/main/java/fr/hygon/yokura/broker/packets/RegisterClientPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..31fd986466f394c443a7fc10f3edce71b9da1ec1
--- /dev/null
+++ b/src/main/java/fr/hygon/yokura/broker/packets/RegisterClientPacket.java
@@ -0,0 +1,17 @@
+package fr.hygon.yokura.broker.packets;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+
+public class RegisterClientPacket implements Packet {
+    @Override
+    public void read(ChannelHandlerContext ctx, ByteBuf in) { // The client will not receive this packet
+
+    }
+
+    @Override
+    public void write(ByteBuf out) {
+        out.writeInt(Packets.REGISTER_CLIENT_PACKET.getPacketID());
+        // The UUID has already been wrote before, so we don't need to rewrite it.
+    }
+}
diff --git a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
index b92672eebf9b815c51552651cc2dee7cfbc3abfb..7547132521b586f329abe0d51c89b4245d12aa1f 100644
--- a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
+++ b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
@@ -113,6 +113,16 @@ public class YokuraGlobalConfig {
         mongoPassword = getString("credentials.mongodb.password", "").toCharArray();
     }
 
+    public static String brokerHost = "localhost";
+    private static void getBrokerHost() {
+        brokerHost = getString("credentials.broker.host", brokerHost);
+    }
+
+    public static int brokerPort = 9800;
+    private static void getBrokerPort() {
+        brokerPort = getInt("credentials.broker.port", brokerPort);
+    }
+
     public static double defaultCoins = 200.0;
     private static void getDefaultCoins() {
         defaultCoins = getDouble("players.default-coins", defaultCoins);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index b5c501b738fe30fe5d628fff60f93bbedd027a76..690b73f6f990e6117927babc6012d95d442dd5e4 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -23,6 +23,7 @@ import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+import fr.hygon.yokura.broker.YokuraBroker; // Yokura
 import fr.hygon.yokura.config.YokuraGlobalConfig; // Yokura
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
@@ -248,6 +249,12 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
 
         fr.hygon.yokura.YokuraAPI.setInstance(new fr.hygon.yokura.YokuraAPIServer(mongoClient, mongoDatabase));
+
+        YokuraBroker broker = new YokuraBroker();
+        if(!broker.connect(YokuraGlobalConfig.brokerHost, YokuraGlobalConfig.brokerPort)) {
+            DedicatedServer.LOGGER.error("Couldn't connect to the broker.");
+            return false;
+        }
         // Yokura end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
