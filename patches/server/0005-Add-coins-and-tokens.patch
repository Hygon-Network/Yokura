From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sun, 19 Sep 2021 15:09:51 +0200
Subject: [PATCH] Add coins and tokens


diff --git a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
index fa0e2957dac84215addae1172724f1b232534da1..b92672eebf9b815c51552651cc2dee7cfbc3abfb 100644
--- a/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
+++ b/src/main/java/fr/hygon/yokura/config/YokuraGlobalConfig.java
@@ -112,4 +112,14 @@ public class YokuraGlobalConfig {
     private static void getMongoPassword() {
         mongoPassword = getString("credentials.mongodb.password", "").toCharArray();
     }
+
+    public static double defaultCoins = 200.0;
+    private static void getDefaultCoins() {
+        defaultCoins = getDouble("players.default-coins", defaultCoins);
+    }
+
+    public static double defaultTokens = 200.0;
+    private static void getDefaultTokens() {
+        defaultTokens = getDouble("players.default-tokens", defaultTokens);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 6d2d2ba4a83d887f4d52188305a4a28c2ee2f014..c699bce3f87295a369af98b0b3e39576956deed4 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -75,6 +75,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.PlayerAdvancements;
 import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.server.network.ServerLoginPacketListenerImpl; // Yokura
 import net.minecraft.server.network.TextFilter;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.sounds.SoundEvent;
@@ -263,8 +264,12 @@ public class ServerPlayer extends Player {
     public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleHashSet; // Paper
     public boolean needsChunkCenterUpdate; // Paper - no-tick view distance // Paper - public
     public org.bukkit.event.player.PlayerQuitEvent.QuitReason quitReason = null; // Paper - there are a lot of changes to do if we change all methods leading to the event
+    // Yokura start
+    public double coins;
+    public double tokens;
+    // Yokura end
 
-    public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile) {
+    public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ServerLoginPacketListenerImpl loginPacketListener) { // Yokura - add loginPacketListener
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
         this.chatVisibility = ChatVisiblity.FULL;
         this.canChatColor = true;
@@ -334,6 +339,11 @@ public class ServerPlayer extends Player {
         this.bukkitPickUpLoot = true;
         this.maxHealthCache = this.getMaxHealth();
         this.cachedSingleMobDistanceMap = new com.destroystokyo.paper.util.PooledHashSets.PooledObjectLinkedOpenHashSet<>(this); // Paper
+
+        // Yokura start
+        coins = loginPacketListener.coins;
+        tokens = loginPacketListener.tokens;
+        // Yokura end
     }
     // Paper start - Chunk priority
     public BlockPos getPointInFront(double inFront) {
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 01fee879c946b6640da34d5890d686f0152437dc..076f1e16d1484a299205796fbaa8ae3790757b4d 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -16,6 +16,8 @@ import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
+import fr.hygon.yokura.YokuraAPI; // Yokura
+import fr.hygon.yokura.config.YokuraGlobalConfig; // Yokura
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.network.Connection;
 import net.minecraft.network.FriendlyByteBuf;
@@ -40,6 +42,9 @@ import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import io.papermc.paper.adventure.PaperAdventure; // Paper
+import org.bson.BsonDocument; // Yokura
+import org.bson.BsonString; // Yokura
+import org.bson.Document; // Yokura
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.Waitable;
 import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
@@ -65,6 +70,10 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
     private ServerPlayer delayedAcceptPlayer;
     public String hostname = ""; // CraftBukkit - add field
     private int velocityLoginMessageId = -1; // Paper - Velocity support
+    // Yokura start
+    public double coins;
+    public double tokens;
+    // Yokura end
 
     public ServerLoginPacketListenerImpl(MinecraftServer server, Connection connection) {
         this.state = ServerLoginPacketListenerImpl.State.HELLO;
@@ -393,6 +402,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
                         }
                         // CraftBukkit end
                         ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.gameProfile.getName(), ServerLoginPacketListenerImpl.this.gameProfile.getId());
+                        fetchPlayerNetworkInfos(); // Yokura
                         ServerLoginPacketListenerImpl.this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
         }
     }
@@ -442,6 +452,37 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
         return new GameProfile(uuid, profile.getName());
     }
 
+    // Yokura start
+    public void fetchPlayerNetworkInfos() {
+        if(this.gameProfile == null) { // Should never happen
+            disconnect(new TextComponent("Â§cCouldn't fetch your data from the database.\n"
+            + "Please contact an administrator on discord with this informations: GameProfil is null."));
+        }
+
+        String playerName = this.gameProfile.getName();
+        UUID playerUUID = this.gameProfile.getId();
+
+        Document playerData = YokuraAPI.getMongoDatabase().getCollection("players").find(new BsonDocument("_id", new BsonString(playerUUID.toString()))).limit(1).first();
+        if(playerData == null) {
+            ServerLoginPacketListenerImpl.LOGGER.info("Creating a profile for the player " + playerName + " in the database...");
+            long startTime = System.currentTimeMillis();
+
+            playerData = new Document("_id", playerUUID.toString())
+                    .append("coins", YokuraGlobalConfig.defaultCoins)
+                    .append("tokens", YokuraGlobalConfig.defaultTokens);
+
+            coins = YokuraGlobalConfig.defaultCoins;
+            tokens = YokuraGlobalConfig.defaultTokens;
+
+            YokuraAPI.getMongoDatabase().getCollection("players").insertOne(playerData);
+
+            ServerLoginPacketListenerImpl.LOGGER.info("Profile for the player " + playerName + " created! (Took " + (System.currentTimeMillis() - startTime) + "ms).");
+        } else {
+            coins = playerData.getDouble("coins");
+            tokens = playerData.getDouble("tokens");
+        }
+    }
+    // Yokura end
     public static enum State {
 
         HELLO, KEY, AUTHENTICATING, NEGOTIATING, READY_TO_ACCEPT, DELAY_ACCEPT, ACCEPTED;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index b20bfe5ab165bf86985e5ff2f93f415d9710e0e4..c29d70aa855e3580733f2b1ab57827fd95021cd3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -6,6 +6,7 @@ import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
+import fr.hygon.yokura.MongoUtils; // Yokura
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.players.UserWhiteListEntry;
 import net.minecraft.stats.ServerStatsCounter;
@@ -37,6 +38,58 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
 
     }
 
+    // Yokura start
+    @Override
+    public double getCoins() {
+        return MongoUtils.getDouble("players", getUniqueId().toString(), "coins");
+    }
+
+    @Override
+    public void addCoins(double coins) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", getCoins() + coins);
+    }
+
+    @Override
+    public void removeCoins(double coins) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", getCoins() - coins);
+    }
+
+    @Override
+    public void setCoins(double coins) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", coins);
+    }
+
+    @Override
+    public boolean hasEnoughCoins(double coins) {
+        return getCoins() >= coins;
+    }
+
+    @Override
+    public double getTokens() {
+        return MongoUtils.getDouble("players", getUniqueId().toString(), "tokens");
+    }
+
+    @Override
+    public void addTokens(double tokens) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", getTokens() + tokens);
+    }
+
+    @Override
+    public void removeTokens(double tokens) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", getTokens() - tokens);
+    }
+
+    @Override
+    public void setTokens(double tokens) {
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", tokens);
+    }
+
+    @Override
+    public boolean hasEnoughTokens(double tokens) {
+        return getTokens() >= tokens;
+    }
+    // Yokura end
+
     public GameProfile getProfile() {
         return this.profile;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 1ccbdd2554073a41ca2f37deca3f1ec3e6a0665f..2db6c2542181694f6c70ac6dce67ab79e5ec9337 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -5,6 +5,7 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.io.BaseEncoding;
 import com.mojang.authlib.GameProfile;
+import fr.hygon.yokura.MongoUtils;  // Yokura
 import io.netty.buffer.Unpooled;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -160,6 +161,68 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.firstPlayed = System.currentTimeMillis();
     }
 
+    // Yokura start
+    @Override
+    public double getCoins() {
+        return getHandle().coins;
+    }
+
+    @Override
+    public void addCoins(double coins) {
+        double newCoins = getCoins() + coins;
+        getHandle().coins = newCoins;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", newCoins);
+    }
+
+    @Override
+    public void removeCoins(double coins) {
+        double newCoins = getCoins() - coins;
+        getHandle().coins = newCoins;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", newCoins);
+    }
+
+    @Override
+    public void setCoins(double coins) {
+        getHandle().coins = coins;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "coins", coins);
+    }
+
+    @Override
+    public boolean hasEnoughCoins(double coins) {
+        return getCoins() >= coins;
+    }
+
+    @Override
+    public double getTokens() {
+        return getHandle().tokens;
+    }
+
+    @Override
+    public void addTokens(double tokens) {
+        double newTokens = getTokens() + tokens;
+        getHandle().tokens = newTokens;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", newTokens);
+    }
+
+    @Override
+    public void removeTokens(double tokens) {
+        double newTokens = getTokens() - tokens;
+        getHandle().tokens = newTokens;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", newTokens);
+    }
+
+    @Override
+    public void setTokens(double tokens) {
+        getHandle().tokens = tokens;
+        MongoUtils.updateValueAsync("players", getUniqueId().toString(), "tokens", tokens);
+    }
+
+    @Override
+    public boolean hasEnoughTokens(double tokens) {
+        return getTokens() >= tokens;
+    }
+    // Yokura end
+
     public GameProfile getProfile() {
         return this.getHandle().getGameProfile();
     }
