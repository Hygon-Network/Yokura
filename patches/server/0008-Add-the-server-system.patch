From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Hygon <hygon806@gmail.com>
Date: Sun, 10 Oct 2021 19:11:04 +0200
Subject: [PATCH] Add the server system


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index cd918cec00d8202252af0d20b1a8891371c538e3..fa620f840c8a7e819a961bebc7bd9f23dd5012ac 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -389,9 +389,11 @@ public class PaperConfig {
         autoRecipeLimit = getInt("settings.spam-limiter.recipe-spam-limit", autoRecipeLimit);
     }
 
-    public static boolean velocitySupport;
-    public static boolean velocityOnlineMode;
+    // Yokura start - We use velocity
+    public static boolean velocitySupport = true;
+    public static boolean velocityOnlineMode = true;
     public static byte[] velocitySecretKey;
+    /*
     private static void velocitySupport() {
         velocitySupport = getBoolean("settings.velocity-support.enabled", false);
         velocityOnlineMode = getBoolean("settings.velocity-support.online-mode", false);
@@ -402,6 +404,8 @@ public class PaperConfig {
             velocitySecretKey = secret.getBytes(StandardCharsets.UTF_8);
         }
     }
+     */
+    // Yokura end
 
     public static int maxBookPageSize = 2560;
     public static double maxBookTotalSizeMultiplier = 0.98D;
diff --git a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
index e3833166e69cdb3d2ad012b270a18c566db1245c..8abb9856e92e6d6ada0a08d78aab01e7acb8356c 100644
--- a/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
+++ b/src/main/java/fr/hygon/yokura/YokuraAPIServer.java
@@ -5,14 +5,20 @@ import com.mongodb.client.MongoDatabase;
 import fr.hygon.yokura.broker.Message;
 import fr.hygon.yokura.broker.YokuraBroker;
 import fr.hygon.yokura.broker.packets.MessagePacket;
+import fr.hygon.yokura.servers.Status;
+import java.io.ByteArrayOutputStream;
+import java.io.DataOutputStream;
+import java.io.IOException;
 
 public class YokuraAPIServer implements IYokuraAPI {
     private final MongoClient mongoClient;
     private final MongoDatabase mongoDatabase;
+    private final String serverID;
 
-    public YokuraAPIServer(MongoClient mongoClient, MongoDatabase mongoDatabase) {
+    public YokuraAPIServer(MongoClient mongoClient, MongoDatabase mongoDatabase, String serverID) {
         this.mongoClient = mongoClient;
         this.mongoDatabase = mongoDatabase;
+        this.serverID = serverID;
     }
 
     @Override
@@ -30,4 +36,27 @@ public class YokuraAPIServer implements IYokuraAPI {
         MessagePacket messagePacket = new MessagePacket(message);
         YokuraBroker.sendPacket(messagePacket);
     }
+
+    @Override
+    public String getServerID() {
+        return serverID;
+    }
+
+    @Override
+    public void setStatus(Status status) {
+        if(getServerID() != null) {
+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
+            DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream);
+
+            try {
+                dataOutputStream.writeUTF(getServerID());
+                dataOutputStream.writeUTF(status.toString());
+            } catch (IOException exception) {
+                exception.printStackTrace();
+            }
+
+            publish(new Message("SERVER_STATUS_UPDATE", byteArrayOutputStream.toByteArray()));
+            MongoUtils.updateValueAsync("network", getServerID(), "status", status.toString());
+        }
+    }
 }
diff --git a/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java b/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java
index 50f01885e9e1149324da157a41c58f72ae927a42..845c8a18bcf9e1029610b5e344c6da84b751864b 100644
--- a/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java
+++ b/src/main/java/fr/hygon/yokura/broker/packets/MessagePacket.java
@@ -10,6 +10,10 @@ import java.nio.charset.StandardCharsets;
 public class MessagePacket implements Packet {
     private final Message message;
 
+    public MessagePacket() {
+        this.message = null;
+    }
+
     public MessagePacket(Message message) {
         this.message = message;
     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fd9d76acc58d753a22562270e2343df6f25e4a30..ca1901dda68fa4880a7cfd6b4db312fcb1ff7178 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -12,6 +12,8 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+import fr.hygon.yokura.YokuraAPI; // Yokura
+import fr.hygon.yokura.servers.Status; // Yokura
 import io.papermc.paper.adventure.PaperAdventure; // Paper
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import java.awt.image.BufferedImage;
@@ -1030,6 +1032,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         // Paper end
         // CraftBukkit end
         MinecraftServer.LOGGER.info("Stopping server");
+        YokuraAPI.setStatus(fr.hygon.yokura.servers.Status.STOPPING); // Yokura
         MinecraftTimings.stopServer(); // Paper
         // CraftBukkit start
         if (this.server != null) {
@@ -1216,6 +1219,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (Util.getNanos() - serverStartTime) / 1.0E9D);
                 LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
                 // Paper end
+                YokuraAPI.setStatus(Status.WAITING_PLAYERS); // Yokura
 
                 org.spigotmc.WatchdogThread.tick(); // Paper
                 org.spigotmc.WatchdogThread.hasStarted = true; // Paper
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index f281412f298f98e4b292596c67c1d22b8c219d57..0dfd3c3901bd8ee6f5afc6dc1f22c5d976a7168d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -21,6 +21,7 @@ import java.util.Locale;
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+import fr.hygon.yokura.broker.BrokerPubSub; // Yokura
 import fr.hygon.yokura.broker.YokuraBroker; // Yokura
 import fr.hygon.yokura.config.YokuraGlobalConfig; // Yokura
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -255,13 +256,23 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
 
-        fr.hygon.yokura.YokuraAPI.setInstance(new fr.hygon.yokura.YokuraAPIServer(mongoClient, mongoDatabase));
+        fr.hygon.yokura.YokuraAPI.setInstance(new fr.hygon.yokura.YokuraAPIServer(mongoClient, mongoDatabase, (String) options.valueOf("network-server-name")));
 
         YokuraBroker broker = new YokuraBroker();
         if(!broker.connect(YokuraGlobalConfig.brokerHost, YokuraGlobalConfig.brokerPort)) {
             DedicatedServer.LOGGER.error("Couldn't connect to the broker.");
             return false;
         }
+
+        BrokerPubSub brokerPubSub = new fr.hygon.yokura.broker.BrokerPubSub() {
+            @Override
+            public void onReceive(String channel, byte[] message) {
+                if(channel.equals("FORWARDING_SECRET_UPDATE")) {
+                    com.destroystokyo.paper.PaperConfig.velocitySecretKey = message;
+                }
+            }
+        };
+        brokerPubSub.registerChannel("FORWARDING_SECRET_UPDATE");
         // Yokura end
 
         this.setPvpAllowed(dedicatedserverproperties.pvp);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index f944e6beafc7876ed9c6923a22f58d82967b77cb..9d7d01553f7cc47c5eb6071bd286ec39857459ba 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -15,7 +15,7 @@ import net.minecraft.world.level.levelgen.WorldGenSettings;
 public class DedicatedServerProperties extends Settings<DedicatedServerProperties> {
 
     public final boolean debug = this.get("debug", false); // CraftBukkit
-    public final boolean onlineMode = this.get("online-mode", true);
+    public final boolean onlineMode = this.get("online-mode", false); // Yokura - We use Velocity
     public final boolean preventProxyConnections = this.get("prevent-proxy-connections", false);
     public final String serverIp = this.get("server-ip", "");
     public final boolean spawnAnimals = this.get("spawn-animals", true);
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 55eae4684069ea27bd1763ea93b85f8fb6d2fb8c..99451a04282139f16ed25189b0dd0fb49f30cdc7 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -166,6 +166,10 @@ public class Main {
                         .ofType(File.class)
                         .defaultsTo(new File(org.apache.commons.io.FileUtils.getUserDirectory() + File.separator + "HygonNetwork" + File.separator + "yokura-global.yml"))
                         .describedAs("YML File");
+                accepts("network-server-name")
+                        .withRequiredArg()
+                        .ofType(String.class)
+                        .describedAs("Network's server name.");
                 // Yokura end
             }
         };
